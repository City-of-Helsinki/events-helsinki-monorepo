#
# supergraph: Configuration of the Supergraph server
#
supergraph:
  # The socket address and port to listen on
  listen: ${env.ROUTER_URL:-0.0.0.0:4000}
  introspection: true
homepage:
  enabled: false
sandbox:
  enabled: true
headers:
  subgraphs:
    venues: # Header rules for just the venues subgraph
      request:
        - propagate: # propagate all headers. Note that Accept-Language is the most important.
            matching: .*
    events: # Header rules for just the events subgraph
      request:
        - propagate: # propagate all headers. Note that there are some custom X-Headers.
            matching: .*
    cms: # Header rules for just the events subgraph
      request:
        - propagate: # propagate authorization header
            named: 'Authorization'
include_subgraph_errors:
  all: true # Propagate errors from all subgraphs
cors:
  origins:
    - https://studio.apollographql.com # Keep this so GraphOS Studio can run queries against your router
    - ${env.FEDERATION_CMS_ROUTING_URL} # CMS origin for page previewing
  match_origins:
    # Use regular expressions to match origins ending in the specified domains.
    # The ^ (caret) anchors the match to the beginning of the string.
    # The \. (backslash dot) escapes the dot, so it matches a literal dot.
    # The (.*) matches any characters (for subdomains, or the main domain itself).
    # The $ (dollar sign) anchors the match to the end of the string.
    - ^https?://(.*)\.hel\.ninja$
    - ^https?://(.*)\.hel\.fi$
    # For localhost with any port:
    - ^http://localhost:\d+$
    - ^https://localhost:\d+$
  # Set to true to add the `Access-Control-Allow-Credentials` header
  allow_credentials: true # For CMS page previewing
  # The headers to allow.
  # Not setting this mirrors a client's received `access-control-request-headers`
  # This is equivalent to allowing any headers,
  # except it will also work if allow_credentials is set to true
  allow_headers: []
  # Allowed request methods
  methods:
    - GET
    - POST
    - OPTIONS
health_check:
  listen: ${env.ROUTER_HEALTHCHECK_URL:-0.0.0.0:4000}
  enabled: true
telemetry:
  instrumentation:
    spans:
      mode: 'spec_compliant'

override_subgraph_url:
  cms: ${env.FEDERATION_CMS_ROUTING_URL}
  events: ${env.FEDERATION_EVENTS_ROUTING_URL}
  unified-search: ${env.FEDERATION_UNIFIED_SEARCH_ROUTING_URL}
  venues: ${env.FEDERATION_VENUES_ROUTING_URL}
# NOTE: traffic_shaping is good for testing the connection issues to a single subgraph
# traffic_shaping:
#   subgraphs:  # Rules applied to requests from the router to individual subgraphs
#     cms:
#       global_rate_limit: # Accept a maximum of 100 requests per 60 secs from the router. Excess requests must be rejected.
#         capacity: 100
#         interval: 60s
